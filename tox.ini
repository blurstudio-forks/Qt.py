[tox]
envlist =
    # `membership-` testenv's generate binding membership information
    # ---------------------------------------------------------------
    # Clean up files from previous test runs
    membership-begin
    # Enable these to inspect older VFX Platform requirements

    # VFX Reference Platform specific builds(Officially supported by Qt.py)
    # Note: Github action/tox testing is limited to just 1 reference python
    # version per Qt binding to simplify the generated markdown tables.
    # Cy2022
    membership-py39-{PySide,PyQt}5.15
    # Cy2023
    ; membership-py310-{PySide,PyQt}5.15
    # Cy2024, Cy2025
    membership-py311-{PySide6.5,PyQt6.7}
    # Cy2026
    ; membership-py313-{PySide,PyQt}6.8

    # Combinations of python and Qt versions that should work
    ; membership-py37-PySide{5.12,5.15}
    ; membership-py{38,39,310}-PySide{5.15}
    ; membership-py{39,310,311,312}-PySide{6.5,6.6}
    ; membership-py{39,310,311,312}-{PySide,PyQt}{6.7,6.8,6.9}
    # Generate common members from the previous tests generated files
    membership-end

    # `test-` testenvs run the nose tests to test Qt.py's code
    # ---------------------------------------------------------------
    # Pre-Generate files for other tests to work around parallelization issues
    test-begin
    # VFX Reference Platform specific builds(Officially supported by Qt.py)
    # Cy2020
    test-py37-{PySide,PyQt}5.13-{impl,caveats,examples}
    # Cy2021
    test-py39-{PySide,PyQt}5.15-{impl,caveats,examples}
    # Cy2022
    test-py39-{PySide,PyQt}5.15-{impl,caveats,examples}
    # Cy2023
    test-py310-{PySide,PyQt}5.15-{impl,caveats,examples}
    # Cy2024, Cy2025
    test-py311-{PySide,PyQt}6.5-{impl,caveats,examples}
    # Cy2026
    ; test-py313-{PySide,PyQt}6.8

skip_missing_interpreters = True

[testenv]
# These are used by all other testenv definitions unless overridden
changedir = {toxinidir}
pass_env =
    QT_VERBOSE
# For membership- tests we don't need Qt.py to be installed. This speeds up
# running the tests and works around install issues with setuptools in py3.7.
skip_install = True
setenv =
    # These are required for py37 to prevent errors caused by newer versions
    py37: VIRTUALENV_PIP==24.0
    py37: VIRTUALENV_SETUPTOOLS==44.1.1
    py37: VIRTUALENV_WHEEL==0.42.0

[testenv:membership-begin]
# Cleans up any files left over from previous membership tests runs
commands =
    python membership.py --clean

[testenv:membership-py{37,38,39,310,311,312,313}-{PySide,PyQt}{5.12,5.13,5.15,6.5,6.6,6.7,6.8,6.9}]
depends = membership-begin
setenv =
    {[testenv]setenv}
    PySide{5.12,5.15}: BINDING=PySide2
    PySide{6.5,6.6,6.7,6.8,6.9}: BINDING=PySide6
    PyQt{5.12,5.15}: BINDING=PyQt5
    PyQt{6.5,6.6,6.7,6.8,6.9}: BINDING=PyQt6
deps =
    PyQt5.12: PyQt5==5.12.*
    PyQt5.15: PyQt5==5.15.*
    PyQt6.5: PyQt6==6.5.*
    PyQt6.6: PyQt6==6.6.*
    PyQt6.7: PyQt6==6.7.*
    PyQt6.8: PyQt6==6.8.*
    PyQt6.9: PyQt6==6.9.*

    PySide5.12: PySide2==5.12.*
    PySide5.15: PySide2==5.15.*
    PySide6.5: PySide6==6.5.*
    PySide6.6: PySide6==6.6.*
    PySide6.7: PySide6==6.7.*
    PySide6.8: PySide6==6.8.*
    PySide6.9: PySide6==6.9.*
commands =
    # Build the membership for the requested Qt binding
    python membership.py --binding {env:BINDING}

[testenv:membership-end]
# Combine the .json files generated by previous tests into the common member files.
depends = membership-py{37,38,39,310,311,312,313}-{PySide,PyQt}{5.12,5.13,5.15,6.5,6.6,6.7,6.8,6.9}
commands =
    python membership.py --generate-common-members

[testenv:test-begin]
# Force all tests to run after membership is generated
depends = membership-end
commands =
    # Generate the test_caveats.py file for all other tests to run. This file
    # must be pre-generated so when running tox parallel mode(tox -p) the file
    # doesn't get changed while another process is trying to read it.
    python -u build_caveats.py

[testenv:test-py{37,38,39,310,311,312,313}-{PySide,PyQt}{5.12,5.13,5.15,6.5,6.6,6.7,6.8,6.9}-{impl,caveats,examples}]
# Run nose tests for each requirement
# We need Qt.py to be installed for nose tests
skip_install = False
depends =
    membership-end
    test-begin
pass_env =
    # This env var lets runners control what platform is used to create
    # QApplications. This lets headless linux runners use the vnc platform.
    QT_QPA_PLATFORM
setenv =
    {[testenv]setenv}
    QT_VERBOSE=1
    PySide{5.12,5.13,5.15}: QT_PREFERRED_BINDING=PySide2
    PySide{6.5,6.6,6.7,6.8,6.9}: QT_PREFERRED_BINDING=PySide6
    PyQt{5.12,5.13,5.15}: QT_PREFERRED_BINDING=PyQt5
    PyQt{6.5,6.6,6.7,6.8,6.9}: QT_PREFERRED_BINDING=PyQt6
    # These are required for py37 to prevent errors caused by newer versions
    py37: VIRTUALENV_PIP==24.0
    py37: VIRTUALENV_SETUPTOOLS==44.1.1
    py37: VIRTUALENV_WHEEL==0.42.0
deps =
    {PySide,PyQt}5.12: PyQt5==5.12.*
    {PySide,PyQt}5.12: PySide2==5.12.*
    py{38,39,310,311}-{PySide,PyQt}5.13: PyQt5==5.13.*
    {PySide,PyQt}5.13: PySide2==5.13.*
    {PySide,PyQt}5.15: PyQt5==5.15.*
    {PySide,PyQt}5.15: PySide2==5.15.*
    py{39,310}-{PySide,PyQt}5.15: PySide6==6.5.*
    py{39,310}-{PySide,PyQt}5.15: PyQt6==6.5.*
    # 6.5 and 6.6 have undefined symbols on linux breaking QNetwork and others
    {PySide,PyQt}6.5: PyQt6==6.7.*;platform_system=="Linux"
    # 6.5 raises `The specified procedure could not be found.` errors on windows
    {PySide,PyQt}6.5: PyQt6==6.7.*;platform_system=="Windows"
    {PySide,PyQt}6.5: PySide6==6.5.*
    {PySide,PyQt}6.6: PyQt6==6.6.*
    {PySide,PyQt}6.6: PySide6==6.6.*
    {PySide,PyQt}6.7: PyQt6==6.7.*
    {PySide,PyQt}6.7: PySide6==6.7.*
    {PySide,PyQt}6.8: PyQt6==6.8.*
    {PySide,PyQt}6.8: PySide6==6.8.*
    {PySide,PyQt}6.9: PyQt6==6.9.*
    {PySide,PyQt}6.9: PySide6==6.9.*

    nose2
    nosepipe
    six
    packaging
    setuptools
    wheel
commands =
    # Workaround for testing PyQt5 in python 3.7.
    # PyQt5-sip has sdists for "PyQt5-sip>12.12" but that is the last version that
    # still built wheels for python 3.7. This forces pip to only install from wheels
    # which keeps pip from trying to compile it on windows.
    py37: pip install --only-binary=:all: PyQt5==5.13.*

    # Testing implementation..
    impl: python -m nose2 --verbose {posargs:tests}

    # Testing caveats..
    caveats: python -m nose2 --verbose test_caveats

    # Testing examples..
    examples: python -m nose2 --verbose examples.loadUi.baseinstance1
    examples: python -m nose2 --verbose examples.QtSiteConfig.main
