name: Run Tests

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

jobs:
  membership:
    # Install a specific combination of PySide/PyQt and python. Gather the
    # available module.class member information and generate common membership.
    runs-on: ubuntu-22.04
    env:
      QT_QPA_PLATFORM: minimal
      QT_VERBOSE: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup tox
        uses: ./.github/actions/setup-tox

      - name: Run Tox
        # Gather membership data for each each Qt binding. This uses only one
        # version of python to reduce the complexity of the output.
        # membership-end combines binding/py data into common membership report
        run: |
          which tox
          tox -e membership-py39-PySide5.15,membership-py39-PyQt5.15,membership-py311-PySide6.5,membership-py311-PyQt6.7,membership-end
          ls -lha .members

      - name: Upload membership report
        uses: actions/upload-artifact@v4
        with:
          name: membership-report
          path: |
            .members/*
            .members/*.json
            .members/*.md
          include-hidden-files: true

  test:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        test_env: [
          # Cy2020
          'test-py37-PySide5.13',
          'test-py37-PyQt5.13',
          # Cy2021
          'test-py39-PySide5.15',
          'test-py39-PyQt5.15',
          # Cy2022
          'test-py39-PySide5.15',
          'test-py39-PyQt5.15',
          # Cy2023
          'test-py310-PySide5.15',
          'test-py310-PyQt5.15',
          # Cy2024, Cy2025
          'test-py311-PySide6.5',
          'test-py311-PyQt6.5',
        ]

    env:
      QT_QPA_PLATFORM: minimal
      QT_VERBOSE: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup tox
        uses: ./.github/actions/setup-tox

      - name: Tox Test - Implementation
        # Note: `--skip-missing-interpreters` prevents false success if python
        # version is not installed when testing.
        run: |
          which tox
          tox --skip-missing-interpreters false -e test-begin,${{ matrix.test_env }}-impl

      - name: Tox Test - Caveats
        run: |
          tox --skip-missing-interpreters false -e ${{ matrix.test_env }}-caveats

      - name: Tox Test - Examples
        run: |
          tox --skip-missing-interpreters false -e ${{ matrix.test_env }}-examples
